{"version":3,"sources":["components/Search.js","components/dateFunctions.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["Search","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","leaseId","_handleInput","bind","assertThisInitialized","_handleSubmit","event","setState","target","value","preventDefault","fetchLease","_this2","axios","get","then","results","props","updateLease","currentLease","data","catch","error","console","log","react_default","a","createElement","className","src","alt","onSubmit","type","name","placeholder","onChange","Component","week","months","dateDiff","date1","date2","day1","Date","dateAdd","days","daysInMiliSecs","setTime","getTime","concat","getFullYear","getMonth","getDate","dateToHuman","date","num","dateForDb","isNaN","populateRentDates","startDate","endDate","weekDay","frequency","rent","dayRate","periodLength","dayOfWeekStart","day","dayOfWeek","getDay","dateToDayOfWeek","populatedTable","dateRanges","startDifference","indexOf","payDate","push","pastPayDate","map","range","result","daysInRentPeriod","toString","rentValue","toFixed","rentEntry","Results","leaseResults","_this$props$currentLe","start_date","end_date","payment_day","id","payment_row","i","key","App","obj","components_Search","assign","components_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.30954f25.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nclass Search extends Component {\n  constructor() {\n    super();\n    this.state ={\n      leaseId: \"\"\n    }\n    this._handleInput = this._handleInput.bind(this);\n    this._handleSubmit = this._handleSubmit.bind(this);\n  }\n// update state based on input lease id\n  _handleInput(event) {\n    this.setState({leaseId: event.target.value});\n  }\n// request update when the form is submitted/ search button pressed\n  _handleSubmit(event) {\n    event.preventDefault();\n    this.fetchLease();\n  }\n// function for retrieving lease info based on id\n  fetchLease() {\n    const leaseURL = \"https://hiring-task-api.herokuapp.com/v1/leases/\";\n\n    axios.get(leaseURL + this.state.leaseId).then( (results) => {\n      this.props.updateLease({currentLease: results.data})\n    }).catch( (error) => console.log(error) );\n\n  }\n\n\n  render() {\n    return (\n      <div className=\"search\">\n      <img className=\"logo\" src=\"logo.svg\" alt=\"Different Logo\" />\n\n        <form className=\"searchForm\" onSubmit={this._handleSubmit}>\n          <label>Find payment details of a specific lease id </label>\n          <input type=\"number\" name=\"\" value={this.state.leaseId} placeholder=\"enter lease id here\" onChange={this._handleInput}></input>\n          <button type=\"submit\" name=\"button\">Search</button>\n        </form>\n      </div>\n\n    )\n  }\n}\n\nexport default Search\n","// This file holds the functions we need for date calculations\n//in Results component and their needed constants\n\nexport const week = [\n  \"sunday\",\n  \"monday\",\n  \"tuesday\",\n  \"wednesday\",\n  \"thursday\",\n  \"friday\",\n  \"saturday\"\n]\n\nexport const months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n]\n//------------------------------------------------------------------------------------------\n//function to generate sequential numbers, like 1st, 2nd, 24th\n\nexport const sequential = function(num) {\n  if (isNaN(num)) {\n    return \"entry must be a number\"\n  }else if (num > 3 && num < 21) {\n    return num + \"th\"\n  } else if ( num % 10 === 1) {\n    return num + \"st\"\n  } else if ( num % 10 === 2) {\n    return num + \"nd\"\n  } else if ( num % 10 === 3) {\n    return num + \"rd\"\n  } else  return num + \"th\"\n}\n//------------------------------------------------------------------------------------------\n//function to accept a YYYY-MM-DD formatted date argument as a string and return day of the week\n\nexport const dateToDayOfWeek = function(date) {\n  let day = new Date(date);\n  let dayOfWeek = day.getDay(day);\n  return week[dayOfWeek];\n}\n//------------------------------------------------------------------------------------------\n//function to accept two YYYY-MM-DD formatted date arguments and return the number of days in between\n\nexport const dateDiff = function(date1, date2) {\n  let day1 = new Date(date1 + \" 00:00 GMT\");\n  let day2 = new Date(date2 + \" 00:00 GMT\");\n  let diff = (day2 - day1)/86400000;\n  // the difference is in milliseconds, and hence divided by number of millisecnds in a day\n  return diff;\n}\n//------------------------------------------------------------------------------------------\n//function to accept a YYYY-MM-DD formatted date argument and number of days and return the date\n\nexport const dateAdd = function(date1, days) {\n  let day1 = new Date(date1 + \" 00:00 GMT\");\n  let daysInMiliSecs = days * 24 * 60 * 60 * 1000;\n\n  day1.setTime(day1.getTime() + daysInMiliSecs);\n//Months are numbered 0-11, hence the adjustments below, also returning in YYYY-MM-DD format string\n  return `${day1.getFullYear()}-${day1.getMonth() + 1 }-${day1.getDate()}`;\n}\n//------------------------------------------------------------------------------------------\n//function to convert date format from the one in databse to the human readable in output\n\nexport const dateToHuman = function(date) {\n  let dateForDb = new Date(date);\n  //create this format; August, 28th 2018 as a string in output\n  let result = months[dateForDb.getMonth()] + ', ' + sequential(dateForDb.getDate()) + ' ' +  dateForDb.getFullYear();\n\n  return result;\n}\n//------------------------------------------------------------------------------------------\n//function to create one entry/instance of payment based on first date, last date and daily rate\n//in this format August, 28th 2018 ║ September, 10th 2018 ║ 14 ║ $1020\nexport const rentEntry = function(date1, date2, dayRate) {\n  let result = [];\n  result.push(dateToHuman(date1));\n  //show the last day of period\n  result.push(dateToHuman(dateAdd(date2,-1)));\n  let daysInRentPeriod = dateDiff(date1,date2)\n  result.push(daysInRentPeriod.toString());\n  let rentValue = '$' + (dayRate * daysInRentPeriod).toFixed(1)\n  result.push(rentValue)\n  //the output is an array formatted like [\"August, 28th 2018\" , \"September, 10th 2018 \", \"14\" , \"$1020\"]\n  return result;\n}\n//------------------------------------------------------------------------------------------\n// function to populate and output date brackets between lease start, respective of payment day and frequency\n\nexport const populateRentDates = function(startDate, endDate, weekDay, frequency, rent) {\n  let dayOfWeekStart = dateToDayOfWeek(startDate);\n  // weekDay = weekDay.toLowerCase();\n  let dayRate, periodLength\n\n  switch (frequency) {\n    case 'weekly':\n      dayRate = rent / 7\n      periodLength = 7\n      break;\n    case 'fortnightly':\n      dayRate = rent / 14\n      periodLength = 14\n      break;\n    case 'monthly':\n      dayRate = rent / 28\n      periodLength = 28\n      break;\n    default:\n\n  }\n\n\n//the final result is an array of arrays, where child arrays are lines in the final result table\n  let populatedTable = [];\n  //this holds the arrays of date ranges for rent only\n  let dateRanges=[];\n\n  let startDifference = week.indexOf(dayOfWeekStart) - week.indexOf(weekDay);\n//making sure the first payment part is calculated correctly based on day of week difference\n  if (startDifference < 0) {\n    startDifference = -startDifference;\n  } else if (startDifference > 0) {\n    startDifference = 7 - startDifference;\n  }\n//pushing the first period into date ranges\n  let payDate = dateAdd(startDate, startDifference)\n  dateRanges.push([startDate, payDate])\n//pushing the middle periods into date ranges, until end of period goes beyond contract end date\n  while (dateDiff(dateAdd(payDate, periodLength), endDate) >= 0) {\n    let pastPayDate = payDate;\n    payDate = dateAdd(payDate, periodLength)\n    dateRanges.push([pastPayDate, payDate])\n  }\n\n  //pushing the last period into date ranges\n  //in contrast to the other date ranges, the last day of the contract seems to be inclusive\n  //as per the provided table, hence adding it to the final range\n  dateRanges.push([payDate, dateAdd(endDate, 1)])\n  //now iterating through date ranges to generate the final populated table\n  dateRanges.map( (range) => {\n    return populatedTable.push(rentEntry(range[0], range[1], dayRate))\n\n  })\n\n\n  return populatedTable\n}\n","import React, { Component } from 'react';\nimport { populateRentDates } from '../components/dateFunctions.js'\n\n\nclass Results extends Component {\n\n  render() {\n    const { start_date, end_date, rent, frequency, payment_day } = this.props.currentLease;\n    const currentLease = this.props.currentLease ;\n    let leaseResults;\n    if (currentLease.start_date) {\n      leaseResults =\n      <div>\n\n        <table className=\"leaseInfo\">\n          <thead className=\"leaseInfoHead\">\n            <tr>\n              <td>Lease id</td>\n              <td>Start date</td>\n              <td>End date</td>\n              <td>Payment day</td>\n              <td>Rent</td>\n              <td>Rent frequency</td>\n            </tr>\n          </thead>\n          <tbody className=\"leaseInfoBody\">\n            <tr>\n              <td>{currentLease.id}</td>\n              <td>{currentLease.start_date}</td>\n              <td>{currentLease.end_date}</td>\n              <td>{currentLease.payment_day}</td>\n              <td>{currentLease.rent}</td>\n              <td>{currentLease.frequency}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <table className=\"resultTable\">\n          <thead>\n            <tr>\n              <th>From</th>\n              <th>To</th>\n              <th>Days</th>\n              <th>Amount</th>\n            </tr>\n          </thead>\n          <tbody>\n            {populateRentDates(start_date, end_date, payment_day, frequency, rent).map( (payment_row, i) => {\n              return(\n                <tr key={i}>\n                  <td>{payment_row[0]}</td>\n                  <td>{payment_row[1]}</td>\n                  <td>{payment_row[2]}</td>\n                  <td>{payment_row[3]}</td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n    }\n      return (\n      <div className=\"results\">\n\n        {leaseResults}\n\n      </div>\n\n    )}\n  }\n\n\nexport default Results\n","import React, { Component } from 'react';\nimport Search from './components/Search'\nimport Results from './components/Results'\nimport './App.css';\n\n\n // Keeping the lease info that comes back from search in the parent component\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      currentLease: {}\n    }\n  }\n  // the function to be passed on to Search for updating the currentLease info\n  updateLease(obj) {\n    this.setState(obj)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      {/*a header and maybe search field with an input field for lease id*/}\n      <Search {...this.state} updateLease={this.updateLease.bind(this)}/>\n      {/*results component for the calculated payments info*/}\n      <Results {...this.state} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}